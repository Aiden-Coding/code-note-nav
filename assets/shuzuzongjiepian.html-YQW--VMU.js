import{_ as a,r as l,o as s,c as i,a as e,b as n,d as t,e as o}from"./app-pMbPEaNl.js";const p={},c=o('<h1 id="数组总结篇" tabindex="-1"><a class="header-anchor" href="#数组总结篇" aria-hidden="true">#</a> 数组总结篇</h1><h2 id="数组理论基础" tabindex="-1"><a class="header-anchor" href="#数组理论基础" aria-hidden="true">#</a> 数组理论基础</h2><p>数组是非常基础的数据结构，在面试中，考察数组的题目一般在思维上都不难，主要是考察对代码的掌控能力</p><p>也就是说，想法很简单，但实现起来 可能就不是那么回事了。</p><p>首先要知道数组在内存中的存储方式，这样才能真正理解数组相关的面试题</p><p><strong>数组是存放在连续内存空间上的相同类型数据的集合。</strong></p><p>数组可以方便的通过下标索引的方式获取到下标下对应的数据。</p><p>举一个字符数组的例子，如图所示：</p><p><img src="https://code-thinking.cdn.bcebos.com/pics/算法通关数组.png" alt="img"></p><p>需要两点注意的是</p><ul><li><strong>数组下标都是从0开始的。</strong></li><li><strong>数组内存空间的地址是连续的</strong></li></ul><p>正是<strong>因为数组的在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。</strong></p><p>例如删除下标为3的元素，需要对下标为3的元素后面的所有元素都要做移动操作，如图所示：</p><p><img src="https://code-thinking.cdn.bcebos.com/pics/算法通关数组1.png" alt="img"></p><p>而且大家如果使用C++的话，要注意vector 和 array的区别，vector的底层实现是array，严格来讲vector是容器，不是数组。</p><p><strong>数组的元素是不能删的，只能覆盖。</strong></p><p>那么二维数组直接上图，大家应该就知道怎么回事了</p><p><img src="https://code-thinking.cdn.bcebos.com/pics/算法通关数组2.png" alt="img"></p><p><strong>那么二维数组在内存的空间地址是连续的么？</strong></p><p>我们来举一个Java的例子，例如： <code>int[][] rating = new int[3][4];</code> ， 这个二维数组在内存空间可不是一个 <code>3*4</code> 的连续地址空间</p><p>看了下图，就应该明白了：</p><p><img src="https://code-thinking.cdn.bcebos.com/pics/算法通关数组3.png" alt="img"></p><p>所以<strong>Java的二维数组在内存中不是 <code>3*4</code> 的连续地址空间，而是四条连续的地址空间组成！</strong></p><h2 id="数组的经典题目" tabindex="-1"><a class="header-anchor" href="#数组的经典题目" aria-hidden="true">#</a> 数组的经典题目</h2><p>在面试中，数组是必考的基础数据结构。</p><p>其实数组的题目在思想上一般比较简单的，但是如果想高效，并不容易。</p><p>我们之前一共讲解了四道经典数组题目，每一道题目都代表一个类型，一种思想。</p><h3 id="二分法" tabindex="-1"><a class="header-anchor" href="#二分法" aria-hidden="true">#</a> 二分法</h3>',28),h={href:"https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html",target:"_blank",rel:"noopener noreferrer"},d=o('<p>这道题目呢，考察数组的基本操作，思路很简单，但是通过率在简单题里并不高，不要轻敌。</p><p>可以使用暴力解法，通过这道题目，如果追求更优的算法，建议试一试用二分法，来解决这道题目</p><ul><li>暴力解法时间复杂度：O(n)</li><li>二分法时间复杂度：O(logn)</li></ul><p>在这道题目中我们讲到了<strong>循环不变量原则</strong>，只有在循环中坚持对区间的定义，才能清楚的把握循环中的各种细节。</p><p><strong>二分法是算法面试中的常考题，建议通过这道题目，锻炼自己手撕二分的能力</strong>。</p><h3 id="双指针法" tabindex="-1"><a class="header-anchor" href="#双指针法" aria-hidden="true">#</a> 双指针法</h3>',6),_={href:"https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html",target:"_blank",rel:"noopener noreferrer"},g=o('<p>双指针法（快慢指针法）：<strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p><ul><li>暴力解法时间复杂度：O(n^2)</li><li>双指针时间复杂度：O(n)</li></ul><p>这道题目迷惑了不少同学，纠结于数组中的元素为什么不能删除，主要是因为以下两点：</p><ul><li>数组在内存中是连续的地址空间，不能释放单一元素，如果要释放，就是全释放（程序运行结束，回收内存栈空间）。</li><li>C++中vector和array的区别一定要弄清楚，vector的底层实现是array，封装后使用更友好。</li></ul><p>双指针法（快慢指针法）在数组和链表的操作中是非常常见的，很多考察数组和链表操作的面试题，都使用双指针法。</p><h3 id="滑动窗口" tabindex="-1"><a class="header-anchor" href="#滑动窗口" aria-hidden="true">#</a> 滑动窗口</h3>',6),u={href:"https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,"本题介绍了数组操作中的另一个重要思想：滑动窗口。",-1),f=e("ul",null,[e("li",null,"暴力解法时间复杂度：O(n^2)"),e("li",null,"滑动窗口时间复杂度：O(n)")],-1),E=e("p",null,"本题中，主要要理解滑动窗口如何移动 窗口起始位置，达到动态更新窗口大小的，从而得出长度最小的符合条件的长度。",-1),b=e("p",null,[e("strong",null,"滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将O(n^2)的暴力解法降为O(n)。")],-1),x=e("p",null,"如果没有接触过这一类的方法，很难想到类似的解题思路，滑动窗口方法还是很巧妙的。",-1),B=e("h3",{id:"模拟行为",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#模拟行为","aria-hidden":"true"},"#"),n(" 模拟行为")],-1),k={href:"https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html",target:"_blank",rel:"noopener noreferrer"},A=e("p",null,"模拟类的题目在数组中很常见，不涉及到什么算法，就是单纯的模拟，十分考察大家对代码的掌控能力。",-1),v=e("p",null,[n("在这道题目中，我们再一次介绍到了"),e("strong",null,"循环不变量原则"),n("，其实这也是写程序中的重要原则。")],-1),O=e("p",null,[n("相信大家有遇到过这种情况： 感觉题目的边界调节超多，一波接着一波的判断，找边界，拆了东墙补西墙，好不容易运行通过了，代码写的十分冗余，毫无章法，其实"),e("strong",null,"真正解决题目的代码都是简洁的，或者有原则性的"),n("，大家可以在这道题目中体会到这一点。")],-1),y=e("h2",{id:"总结",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),n(" 总结")],-1),z=e("p",null,[e("img",{src:"https://code-thinking-1253855093.file.myqcloud.com/pics/数组总结.png",alt:""})],-1),C={href:"https://programmercarl.com/other/kstar.html",target:"_blank",rel:"noopener noreferrer"},F={href:"https://wx.zsxq.com/dweb2/index/footprint/844412858822412",target:"_blank",rel:"noopener noreferrer"},I=e("p",null,"从二分法到双指针，从滑动窗口到螺旋矩阵，相信如果大家真的认真做了「代码随想录」每日推荐的题目，定会有所收获。",-1),N=e("p",null,"推荐的题目即使大家之前做过了，再读一遍文章，也会帮助你提炼出解题的精髓所在。",-1);function V(w,j){const r=l("ExternalLinkIcon");return s(),i("div",null,[c,e("p",null,[e("a",h,[n("数组：每次遇到二分法，都是一看就会，一写就废"),t(r)])]),d,e("ul",null,[e("li",null,[e("a",_,[n("数组：就移除个元素很难么？"),t(r)])])]),g,e("ul",null,[e("li",null,[e("a",u,[n("数组：滑动窗口拯救了你"),t(r)])])]),m,f,E,b,x,B,e("ul",null,[e("li",null,[e("a",k,[n("数组：这个循环可以转懵很多人！"),t(r)])])]),A,v,O,y,z,e("p",null,[n("这个图是 "),e("a",C,[n("代码随想录知识星球"),t(r)]),n(" 成员："),e("a",F,[n("海螺人"),t(r)]),n("，所画，总结的非常好，分享给大家。")]),I,N])}const J=a(p,[["render",V],["__file","shuzuzongjiepian.html.vue"]]);export{J as default};
