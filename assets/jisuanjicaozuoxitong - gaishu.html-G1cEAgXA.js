import{_ as a,o as e,c as t,e as r}from"./app-pMbPEaNl.js";const d="/code-note-nav/assets/tGPV0-cCSSfHbq.png",h="/code-note-nav/assets/2_14_microkernelArchitecture-wjrrf52v.jpg",i={},n=r('<h1 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h1><h2 id="基本特征" tabindex="-1"><a class="header-anchor" href="#基本特征" aria-hidden="true">#</a> 基本特征</h2><h3 id="_1-并发" tabindex="-1"><a class="header-anchor" href="#_1-并发" aria-hidden="true">#</a> 1. 并发</h3><p>并发是指宏观上在一段时间内能同时运行多个程序，而并行则指同一时刻能运行多个指令。</p><p>并行需要硬件支持，如多流水线、多核处理器或者分布式计算系统。</p><p>操作系统通过引入进程和线程，使得程序能够并发运行。</p><h3 id="_2-共享" tabindex="-1"><a class="header-anchor" href="#_2-共享" aria-hidden="true">#</a> 2. 共享</h3><p>共享是指系统中的资源可以被多个并发进程共同使用。</p><p>有两种共享方式：互斥共享和同时共享。</p><p>互斥共享的资源称为临界资源，例如打印机等，在同一时刻只允许一个进程访问，需要用同步机制来实现互斥访问。</p><h3 id="_3-虚拟" tabindex="-1"><a class="header-anchor" href="#_3-虚拟" aria-hidden="true">#</a> 3. 虚拟</h3><p>虚拟技术把一个物理实体转换为多个逻辑实体。</p><p>主要有两种虚拟技术：时（时间）分复用技术和空（空间）分复用技术。</p><p>多个进程能在同一个处理器上并发执行使用了时分复用技术，让每个进程轮流占用处理器，每次只执行一小个时间片并快速切换。</p><p>虚拟内存使用了空分复用技术，它将物理内存抽象为地址空间，每个进程都有各自的地址空间。地址空间的页被映射到物理内存，地址空间的页并不需要全部在物理内存中，当使用到一个没有在物理内存的页时，执行页面置换算法，将该页置换到内存中。</p><h3 id="_4-异步" tabindex="-1"><a class="header-anchor" href="#_4-异步" aria-hidden="true">#</a> 4. 异步</h3><p>异步指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。</p><h2 id="基本功能" tabindex="-1"><a class="header-anchor" href="#基本功能" aria-hidden="true">#</a> 基本功能</h2><h3 id="_1-进程管理" tabindex="-1"><a class="header-anchor" href="#_1-进程管理" aria-hidden="true">#</a> 1. 进程管理</h3><p>进程控制、进程同步、进程通信、死锁处理、处理机调度等。</p><h3 id="_2-内存管理" tabindex="-1"><a class="header-anchor" href="#_2-内存管理" aria-hidden="true">#</a> 2. 内存管理</h3><p>内存分配、地址映射、内存保护与共享、虚拟内存等。</p><h3 id="_3-文件管理" tabindex="-1"><a class="header-anchor" href="#_3-文件管理" aria-hidden="true">#</a> 3. 文件管理</h3><p>文件存储空间的管理、目录管理、文件读写管理和保护等。</p><h3 id="_4-设备管理" tabindex="-1"><a class="header-anchor" href="#_4-设备管理" aria-hidden="true">#</a> 4. 设备管理</h3><p>完成用户的 I/O 请求，方便用户使用各种设备，并提高设备的利用率。</p><p>主要包括缓冲管理、设备分配、设备处理、虛拟设备等。</p><h2 id="系统调用" tabindex="-1"><a class="header-anchor" href="#系统调用" aria-hidden="true">#</a> 系统调用</h2><p>如果一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成。</p><p><img src="'+d+'" alt="image-20220324093855618"></p><p>Linux 的系统调用主要有以下这些：</p><table><thead><tr><th style="text-align:center;">Task</th><th>Commands</th></tr></thead><tbody><tr><td style="text-align:center;">进程控制</td><td>fork(); exit(); wait();</td></tr><tr><td style="text-align:center;">进程通信</td><td>pipe(); shmget(); mmap();</td></tr><tr><td style="text-align:center;">文件操作</td><td>open(); read(); write();</td></tr><tr><td style="text-align:center;">设备操作</td><td>ioctl(); read(); write();</td></tr><tr><td style="text-align:center;">信息维护</td><td>getpid(); alarm(); sleep();</td></tr><tr><td style="text-align:center;">安全</td><td>chmod(); umask(); chown();</td></tr></tbody></table><h2 id="宏内核和微内核" tabindex="-1"><a class="header-anchor" href="#宏内核和微内核" aria-hidden="true">#</a> 宏内核和微内核</h2><h3 id="_1-宏内核" tabindex="-1"><a class="header-anchor" href="#_1-宏内核" aria-hidden="true">#</a> 1. 宏内核</h3><p>宏内核是将操作系统功能作为一个紧密结合的整体放到内核。</p><p>由于各模块共享信息，因此有很高的性能。</p><h3 id="_2-微内核" tabindex="-1"><a class="header-anchor" href="#_2-微内核" aria-hidden="true">#</a> 2. 微内核</h3><p>由于操作系统不断复杂，因此将一部分操作系统功能移出内核，从而降低内核的复杂性。移出的部分根据分层的原则划分成若干服务，相互独立。</p><p>在微内核结构下，操作系统被划分成小的、定义良好的模块，只有微内核这一个模块运行在内核态，其余模块运行在用户态。</p><p>因为需要频繁地在用户态和核心态之间进行切换，所以会有一定的性能损失。</p><p><img src="'+h+'" alt="image-20220324093855618"></p><h2 id="中断分类" tabindex="-1"><a class="header-anchor" href="#中断分类" aria-hidden="true">#</a> 中断分类</h2><h3 id="_1-外中断" tabindex="-1"><a class="header-anchor" href="#_1-外中断" aria-hidden="true">#</a> 1. 外中断</h3><p>由 CPU 执行指令以外的事件引起，如 I/O 完成中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。</p><h3 id="_2-异常" tabindex="-1"><a class="header-anchor" href="#_2-异常" aria-hidden="true">#</a> 2. 异常</h3><p>由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。</p><h3 id="_3-陷入" tabindex="-1"><a class="header-anchor" href="#_3-陷入" aria-hidden="true">#</a> 3. 陷入</h3><p>在用户程序中使用系统调用。</p>',48),s=[n];function c(p,o){return e(),t("div",null,s)}const l=a(i,[["render",c],["__file","jisuanjicaozuoxitong - gaishu.html.vue"]]);export{l as default};
