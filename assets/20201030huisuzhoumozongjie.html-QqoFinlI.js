import{_ as a,r as l,o as s,c as h,a as e,b as r,d as o,e as n}from"./app-pMbPEaNl.js";const i={},p=n('<p align="center"><a href="https://mp.weixin.qq.com/s/QVF6upVMSbgvZy8lHZS3CQ"><img src="https://img.shields.io/badge/知识星球-代码随想录-blue" alt=""></a><a href="https://mp.weixin.qq.com/s/b66DFkOp8OOxdZC_xLZxfw"><img src="https://img.shields.io/badge/刷题-微信群-green" alt=""></a><a href="https://img-blog.csdnimg.cn/20201210231711160.png"><img src="https://img.shields.io/badge/公众号-代码随想录-brightgreen" alt=""></a><a href="https://space.bilibili.com/525438321"><img src="https://img.shields.io/badge/B站-代码随想录-orange" alt=""></a></p><hr><h1 id="本周小结-回溯算法系列一" tabindex="-1"><a class="header-anchor" href="#本周小结-回溯算法系列一" aria-hidden="true">#</a> 本周小结！（回溯算法系列一）</h1><h2 id="周一" tabindex="-1"><a class="header-anchor" href="#周一" aria-hidden="true">#</a> 周一</h2><p>本周我们正式开始了回溯算法系列，那么首先当然是概述。</p>',5),c={href:"https://programmercarl.com/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html",target:"_blank",rel:"noopener noreferrer"},_=n("<p><strong>回溯是递归的副产品，只要有递归就会有回溯</strong>。</p><p>回溯法就是暴力搜索，并不是什么高效的算法，最多在剪枝一下。</p><p>回溯算法能解决如下问题：</p><ul><li>组合问题：N个数里面按一定规则找出k个数的集合</li><li>排列问题：N个数按一定规则全排列，有几种排列方式</li><li>切割问题：一个字符串按一定规则有几种切割方式</li><li>子集问题：一个N个数的集合里有多少符合条件的子集</li><li>棋盘问题：N皇后，解数独等等</li></ul><p>是不是感觉回溯算法有点厉害了。</p><p>回溯法确实不好理解，所以需要把回溯法抽象为一个图形来理解就容易多了，每一道回溯法的题目都可以抽象为树形结构。</p>",6),d={href:"https://programmercarl.com/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,"这个模板会伴随整个回溯法系列！",-1),E=e("h2",{id:"周二",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#周二","aria-hidden":"true"},"#"),r(" 周二")],-1),g={href:"https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html",target:"_blank",rel:"noopener noreferrer"},f=e("p",null,"我在文中开始的时候给大家列举k层for循环例子，进而得出都是同样是暴力解法，为什么要用回溯法。",-1),u=e("p",null,[e("strong",null,"此时大家应该深有体会回溯法的魅力，用递归控制for循环嵌套的数量！")],-1),B=e("p",null,[r("本题我把回溯问题抽象为树形结构，可以直观的看出其搜索的过程："),e("strong",null,"for循环横向遍历，递归纵向遍历，回溯不断调整结果集"),r("。")],-1),b=e("h2",{id:"周三",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#周三","aria-hidden":"true"},"#"),r(" 周三")],-1),k={href:"https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://programmercarl.com/0077.%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96.html",target:"_blank",rel:"noopener noreferrer"},x=e("p",null,[e("strong",null,"剪枝精髓是：for循环在寻找起点的时候要有一个范围，如果这个起点到集合终止之间的元素已经不够 题目要求的k个元素了，就没有必要搜索了"),r("。")],-1),I=e("h2",{id:"周四",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#周四","aria-hidden":"true"},"#"),r(" 周四")],-1),C={href:"https://programmercarl.com/0216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII.html",target:"_blank",rel:"noopener noreferrer"},F={href:"https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html",target:"_blank",rel:"noopener noreferrer"},q=e("p",null,[r("整体思路还是一样的，本题的剪枝会好想一些，即："),e("strong",null,"已选元素总和如果已经大于n（题中要求的和）了，那么往后遍历就没有意义了，直接剪掉"),r("。")],-1),N={href:"https://programmercarl.com/0077.%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96.html",target:"_blank",rel:"noopener noreferrer"},V=e("p",null,[r("所以，剪枝的代码，可以把for循环，加上 "),e("code",null,"i <= 9 - (k - path.size()) + 1"),r(" 的限制！")],-1),Z=e("p",null,"组合总和问题还有一些花样，下周还会介绍到。",-1),w=e("h2",{id:"周五",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#周五","aria-hidden":"true"},"#"),r(" 周五")],-1),D={href:"https://programmercarl.com/0017.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://programmercarl.com/0216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://programmercarl.com/0216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII.html",target:"_blank",rel:"noopener noreferrer"},L=e("p",null,"如果大家在现场面试的时候，一定要注意各种输入异常的情况，例如本题输入1 * #按键。",-1),Q=e("p",null,"其实本题不算难，但也处处是细节，还是要反复琢磨。",-1),j=e("h2",{id:"周六",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#周六","aria-hidden":"true"},"#"),r(" 周六")],-1),y=e("p",null,"因为之前链表系列没有写总结，虽然链表系列已经是两个月前的事情，但还是有必要补一下。",-1),H={href:"https://programmercarl.com/%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93%E7%AF%87.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html",target:"_blank",rel:"noopener noreferrer"},T=n('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>相信通过这一周对回溯法的学习，大家已经掌握其题本套路了，也不会对回溯法那么畏惧了。</p><p>回溯法抽象为树形结构后，其遍历过程就是：<strong>for循环横向遍历，递归纵向遍历，回溯不断调整结果集</strong>。</p><p>这个是我做了很多回溯的题目，不断摸索其规律才总结出来的。</p><p>对于回溯法的整体框架，网上搜的文章这块一般都说不清楚，按照天上掉下来的代码对着讲解，不知道究竟是怎么来的，也不知道为什么要这么写。</p><p>所以，录友们刚开始学回溯法，起跑姿势就很标准了。</p><p>下周依然是回溯法，难度又要上升一个台阶了。</p><p>最后祝录友们周末愉快！</p><p><strong>如果感觉「代码随想录」不错，就分享给身边的同学朋友吧，一起来学习算法！</strong></p><hr>',10),G={href:"https://mp.weixin.qq.com/s/b66DFkOp8OOxdZC_xLZxfw",target:"_blank",rel:"noopener noreferrer"},J={href:"https://space.bilibili.com/525438321",target:"_blank",rel:"noopener noreferrer"},K={href:"https://mp.weixin.qq.com/s/QVF6upVMSbgvZy8lHZS3CQ",target:"_blank",rel:"noopener noreferrer"};function P(R,U){const t=l("ExternalLinkIcon");return s(),h("div",null,[p,e("p",null,[r("在"),e("a",c,[r("关于回溯算法，你该了解这些！"),o(t)]),r("中介绍了什么是回溯，回溯法的效率，回溯法解决的问题以及回溯法模板。")]),_,e("p",null,[r("针对很多同学都写不好回溯，我在"),e("a",d,[r("关于回溯算法，你该了解这些！"),o(t)]),r("用回溯三部曲，分析了回溯算法，并给出了回溯法的模板。")]),m,E,e("p",null,[r("在"),e("a",g,[r("回溯算法：求组合问题！"),o(t)]),r("中，我们开始用回溯法解决第一道题目，组合问题。")]),f,u,B,b,e("p",null,[r("针对"),e("a",k,[r("回溯算法：求组合问题！"),o(t)]),r("还可以做剪枝的操作。")]),e("p",null,[r("在"),e("a",A,[r("回溯算法：组合问题再剪剪枝"),o(t)]),r("中把回溯法代码做了剪枝优化，在文中我依然把问题抽象为一个树形结构，大家可以一目了然剪的究竟是哪里。")]),x,I,e("p",null,[r("在"),e("a",C,[r("回溯算法：求组合总和！"),o(t)]),r("中，相当于 "),e("a",F,[r("回溯算法：求组合问题！"),o(t)]),r("加了一个元素总和的限制。")]),q,e("p",null,[r("在本题中，依然还可以有一个剪枝，就是"),e("a",N,[r("回溯算法：组合问题再剪剪枝"),o(t)]),r("中提到的，对for循环选择的起始范围的剪枝。")]),V,Z,w,e("p",null,[r("在"),e("a",D,[r("回溯算法：电话号码的字母组合"),o(t)]),r("中，开始用多个集合来求组合，还是熟悉的模板题目，但是有一些细节。")]),e("p",null,[r("例如这里for循环，可不像是在 "),e("a",O,[r("回溯算法：求组合问题！"),o(t)]),r("和"),e("a",v,[r("回溯算法：求组合总和！"),o(t)]),r("中从startIndex开始遍历的。")]),e("p",null,[e("strong",null,[r("因为本题每一个数字代表的是不同集合，也就是求不同集合之间的组合，而"),e("a",z,[r("回溯算法：求组合问题！"),o(t)]),r("和"),e("a",S,[r("回溯算法：求组合总和！"),o(t)]),r("都是是求同一个集合中的组合！")])]),L,Q,j,y,e("p",null,[r("所以给出"),e("a",H,[r("链表：总结篇！"),o(t)]),r("，这里对之前链表理论基础和经典题目进行了总结。")]),e("p",null,[r("同时对"),e("a",M,[r("链表：环找到了，那入口呢？"),o(t)]),r("中求环入口的问题又进行了补充证明，可以说把环形链表的方方面面都讲的很通透了，大家如果没有做过环形链表的题目一定要去做一做。")]),T,e("ul",null,[e("li",null,[r("微信："),e("a",G,[r("程序员Carl"),o(t)])]),e("li",null,[r("B站："),e("a",J,[r("代码随想录"),o(t)])]),e("li",null,[r("知识星球："),e("a",K,[r("代码随想录"),o(t)])])])])}const X=a(i,[["render",P],["__file","20201030huisuzhoumozongjie.html.vue"]]);export{X as default};
