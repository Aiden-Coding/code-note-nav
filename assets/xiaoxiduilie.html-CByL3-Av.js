import{_ as n,r as h,o as t,c as d,a as e,b as r,d as i,e as s}from"./app-pMbPEaNl.js";const o="/code-note-nav/assets/image-20191212011250613-TVsfYtSm.png",c="/code-note-nav/assets/image-20191212011410374-ZeDksPhp.png",l="/code-note-nav/assets/image-20191212011747967-PQ0lGyPO.png",p={},u=s('<h1 id="消息队列" tabindex="-1"><a class="header-anchor" href="#消息队列" aria-hidden="true">#</a> 消息队列</h1><h2 id="一、消息模型" tabindex="-1"><a class="header-anchor" href="#一、消息模型" aria-hidden="true">#</a> 一、消息模型</h2><h3 id="点对点" tabindex="-1"><a class="header-anchor" href="#点对点" aria-hidden="true">#</a> 点对点</h3><p>消息生产者向消息队列中发送了一个消息之后，只能被一个消费者消费一次。</p><p><img src="'+o+'" alt="image-20220324093855618"></p><h3 id="发布-订阅" tabindex="-1"><a class="header-anchor" href="#发布-订阅" aria-hidden="true">#</a> 发布/订阅</h3><p>消息生产者向频道发送一个消息之后，多个消费者可以从该频道订阅到这条消息并消费。</p><p><img src="'+c+'" alt="image-20220324093855618"></p><p>发布与订阅模式和观察者模式有以下不同：</p><ul><li>观察者模式中，观察者和主题都知道对方的存在；而在发布与订阅模式中，生产者与消费者不知道对方的存在，它们之间通过频道进行通信。</li><li>观察者模式是同步的，当事件触发时，主题会调用观察者的方法，然后等待方法返回；而发布与订阅模式是异步的，生产者向频道发送一个消息之后，就不需要关心消费者何时去订阅这个消息，可以立即返回。</li></ul><p><img src="'+l+'" alt="image-20220324093855618"></p><h2 id="二、使用场景" tabindex="-1"><a class="header-anchor" href="#二、使用场景" aria-hidden="true">#</a> 二、使用场景</h2><h3 id="异步处理" tabindex="-1"><a class="header-anchor" href="#异步处理" aria-hidden="true">#</a> 异步处理</h3><p>发送者将消息发送给消息队列之后，不需要同步等待消息接收者处理完毕，而是立即返回进行其它操作。消息接收者从消息队列中订阅消息之后异步处理。</p><p>例如在注册流程中通常需要发送验证邮件来确保注册用户身份的合法性，可以使用消息队列使发送验证邮件的操作异步处理，用户在填写完注册信息之后就可以完成注册，而将发送验证邮件这一消息发送到消息队列中。</p><p>只有在业务流程允许异步处理的情况下才能这么做，例如上面的注册流程中，如果要求用户对验证邮件进行点击之后才能完成注册的话，就不能再使用消息队列。</p><h3 id="流量削锋" tabindex="-1"><a class="header-anchor" href="#流量削锋" aria-hidden="true">#</a> 流量削锋</h3><p>在高并发的场景下，如果短时间有大量的请求到达会压垮服务器。</p><p>可以将请求发送到消息队列中，服务器按照其处理能力从消息队列中订阅消息进行处理。</p><h3 id="应用解耦" tabindex="-1"><a class="header-anchor" href="#应用解耦" aria-hidden="true">#</a> 应用解耦</h3><p>如果模块之间不直接进行调用，模块之间耦合度就会很低，那么修改一个模块或者新增一个模块对其它模块的影响会很小，从而实现可扩展性。</p><p>通过使用消息队列，一个模块只需要向消息队列中发送消息，其它模块可以选择性地从消息队列中订阅消息从而完成调用。</p><h2 id="三、可靠性" tabindex="-1"><a class="header-anchor" href="#三、可靠性" aria-hidden="true">#</a> 三、可靠性</h2><h3 id="发送端的可靠性" tabindex="-1"><a class="header-anchor" href="#发送端的可靠性" aria-hidden="true">#</a> 发送端的可靠性</h3><p>发送端完成操作后一定能将消息成功发送到消息队列中。</p><p>实现方法：在本地数据库建一张消息表，将消息数据与业务数据保存在同一数据库实例里，这样就可以利用本地数据库的事务机制。事务提交成功后，将消息表中的消息转移到消息队列中，若转移消息成功则删除消息表中的数据，否则继续重传。</p><h3 id="接收端的可靠性" tabindex="-1"><a class="header-anchor" href="#接收端的可靠性" aria-hidden="true">#</a> 接收端的可靠性</h3><p>接收端能够从消息队列成功消费一次消息。</p><p>两种实现方法：</p><ul><li>保证接收端处理消息的业务逻辑具有幂等性：只要具有幂等性，那么消费多少次消息，最后处理的结果都是一样的。</li><li>保证消息具有唯一编号，并使用一张日志表来记录已经消费的消息编号。</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',31),_={href:"http://developers-club.com/posts/270339/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/lizhitao/article/details/47723105",target:"_blank",rel:"noopener noreferrer"};function m(x,b){const a=h("ExternalLinkIcon");return t(),d("div",null,[u,e("ul",null,[e("li",null,[e("a",_,[r("Observer vs Pub-Sub"),i(a)])]),e("li",null,[e("a",f,[r("消息队列中点对点与发布订阅区别"),i(a)])])])])}const v=n(p,[["render",m],["__file","xiaoxiduilie.html.vue"]]);export{v as default};
