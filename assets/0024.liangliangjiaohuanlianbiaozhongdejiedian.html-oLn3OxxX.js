import{_ as t,r as p,o,c,a as n,b as s,d as e,e as l}from"./app-pMbPEaNl.js";const i={},u=n("h1",{id:"_24-两两交换链表中的节点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_24-两两交换链表中的节点","aria-hidden":"true"},"#"),s(" 24. 两两交换链表中的节点")],-1),r={href:"https://leetcode.cn/problems/swap-nodes-in-pairs/",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。",-1),k=n("p",null,"你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。",-1),v=n("p",null,[n("img",{src:"https://code-thinking.cdn.bcebos.com/pics/24.两两交换链表中的节点-题意.jpg",alt:"img"})],-1),m=n("h2",{id:"算法公开课",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#算法公开课","aria-hidden":"true"},"#"),s(" 算法公开课")],-1),b={href:"https://programmercarl.com/other/gongkaike.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.bilibili.com/video/BV1YT411g7br",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"思路",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#思路","aria-hidden":"true"},"#"),s(" 思路")],-1),y=n("p",null,"这道题目正常模拟就可以了。",-1),g=n("p",null,"建议使用虚拟头结点，这样会方便很多，要不然每次针对头结点（没有前一个指针指向头结点），还要单独处理。",-1),w={href:"https://programmercarl.com/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html",target:"_blank",rel:"noopener noreferrer"},N=l(`<p>接下来就是交换相邻两个元素了，<strong>此时一定要画图，不画图，操作多个指针很容易乱，而且要操作的先后顺序</strong></p><p>初始时，cur指向虚拟头结点，然后进行如下三步：</p><p><img src="https://code-thinking.cdn.bcebos.com/pics/24.两两交换链表中的节点1.png" alt="24.两两交换链表中的节点1"></p><p>操作之后，链表如下：</p><p><img src="https://code-thinking.cdn.bcebos.com/pics/24.两两交换链表中的节点2.png" alt="24.两两交换链表中的节点2"></p><p>看这个可能就更直观一些了：</p><p><img src="https://code-thinking.cdn.bcebos.com/pics/24.两两交换链表中的节点3.png" alt="24.两两交换链表中的节点3"></p><p>对应的C++代码实现如下： （注释中详细和如上图中的三步做对应）</p><div class="language-CPP line-numbers-mode" data-ext="CPP"><pre class="language-CPP"><code>class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode* dummyHead = new ListNode(0); // 设置一个虚拟头结点
        dummyHead-&gt;next = head; // 将虚拟头结点指向head，这样方便后面做删除操作
        ListNode* cur = dummyHead;
        while(cur-&gt;next != nullptr &amp;&amp; cur-&gt;next-&gt;next != nullptr) {
            ListNode* tmp = cur-&gt;next; // 记录临时节点
            ListNode* tmp1 = cur-&gt;next-&gt;next-&gt;next; // 记录临时节点

            cur-&gt;next = cur-&gt;next-&gt;next;    // 步骤一
            cur-&gt;next-&gt;next = tmp;          // 步骤二
            cur-&gt;next-&gt;next-&gt;next = tmp1;   // 步骤三

            cur = cur-&gt;next-&gt;next; // cur移动两位，准备下一轮交换
        }
        ListNode* result = dummyHead-&gt;next;
        delete dummyHead;
        return result;
    }
};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><h2 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展" aria-hidden="true">#</a> 拓展</h2><p><strong>这里还是说一下，大家不必太在意力扣上执行用时，打败多少多少用户，这个统计不准确的。</strong></p><p>做题的时候自己能分析出来时间复杂度就可以了，至于力扣上执行用时，大概看一下就行。</p><p>上面的代码我第一次提交执行用时8ms，打败6.5%的用户，差点吓到我了。</p><p>心想应该没有更好的方法了吧，也就$O(n)$的时间复杂度，重复提交几次，这样了：</p><p><img src="https://code-thinking.cdn.bcebos.com/pics/24.两两交换链表中的节点.png" alt="24.两两交换链表中的节点"></p><p>力扣上的统计如果两份代码是 100ms 和 300ms的耗时，其实是需要注意的。</p><p>如果一个是 4ms 一个是 12ms，看上去好像是一个打败了80%，一个打败了20%，其实是没有差别的。 只不过是力扣上统计的误差而已。</p><h2 id="其他语言版本" tabindex="-1"><a class="header-anchor" href="#其他语言版本" aria-hidden="true">#</a> 其他语言版本</h2><h3 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C:</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */</span>
<span class="token comment">//递归版本</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//递归结束条件：头节点不存在或头节点的下一个节点不存在。此时不需要交换，直接返回head</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token comment">//创建一个节点指针类型保存头结点下一个节点</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>newHead <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token comment">//更改头结点+2位节点后的值，并将头结点的next指针指向这个更改过的list</span>
    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>newHead<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//将新的头结点的next指针指向老的头节点</span>
    newHead<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//迭代版本</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//使用双指针避免使用中间变量</span>
    <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> ListNode<span class="token punctuation">;</span>
    ListNode <span class="token operator">*</span>fakehead <span class="token operator">=</span> <span class="token punctuation">(</span>ListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fakehead<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    ListNode<span class="token operator">*</span> right <span class="token operator">=</span> fakehead<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    ListNode<span class="token operator">*</span> left <span class="token operator">=</span> fakehead<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&amp;&amp;</span> right <span class="token operator">&amp;&amp;</span> right<span class="token operator">-&gt;</span>next <span class="token punctuation">)</span><span class="token punctuation">{</span>
        left<span class="token operator">-&gt;</span>next <span class="token operator">=</span> right<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        right<span class="token operator">-&gt;</span>next <span class="token operator">=</span> left<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        left<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next <span class="token operator">=</span> right<span class="token punctuation">;</span>
        left <span class="token operator">=</span> right<span class="token punctuation">;</span>
        right <span class="token operator">=</span> left<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> fakehead<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java" tabindex="-1"><a class="header-anchor" href="#java" aria-hidden="true">#</a> Java：</h3><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>// 递归版本
class Solution {
    public ListNode swapPairs(ListNode head) {
        // base case 退出提交
        if(head == null || head.next == null) return head;
        // 获取当前节点的下一个节点
        ListNode next = head.next;
        // 进行递归
        ListNode newNode = swapPairs(next.next);
        // 这里进行交换
        next.next = head;
        head.next = newNode;

        return next;
    }
} 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> dumyhead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置一个虚拟头结点</span>
        dumyhead<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment">// 将虚拟头结点指向head，这样方便后面做删除操作</span>
        <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> dumyhead<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> temp<span class="token punctuation">;</span> <span class="token comment">// 临时节点，保存两个节点后面的节点</span>
        <span class="token class-name">ListNode</span> firstnode<span class="token punctuation">;</span> <span class="token comment">// 临时节点，保存两个节点之中的第一个节点</span>
        <span class="token class-name">ListNode</span> secondnode<span class="token punctuation">;</span> <span class="token comment">// 临时节点，保存两个节点之中的第二个节点</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            temp <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            firstnode <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            secondnode <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> secondnode<span class="token punctuation">;</span>       <span class="token comment">// 步骤一</span>
            secondnode<span class="token punctuation">.</span>next <span class="token operator">=</span> firstnode<span class="token punctuation">;</span> <span class="token comment">// 步骤二</span>
            firstnode<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token comment">// 步骤三</span>
            cur <span class="token operator">=</span> firstnode<span class="token punctuation">;</span> <span class="token comment">// cur移动，准备下一轮交换</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dumyhead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="python" tabindex="-1"><a class="header-anchor" href="#python" aria-hidden="true">#</a> Python：</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 递归版本</span>
<span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode:</span>
<span class="token comment">#     def __init__(self, val=0, next=None):</span>
<span class="token comment">#         self.val = val</span>
<span class="token comment">#         self.next = next</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> head <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> head

        <span class="token comment"># 待翻转的两个node分别是pre和cur</span>
        pre <span class="token operator">=</span> head
        cur <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token builtin">next</span> <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
        
        cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre  <span class="token comment"># 交换</span>
        pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>swapPairs<span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">)</span> <span class="token comment"># 将以next为head的后续链表两两交换</span>
         
        <span class="token keyword">return</span> cur
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode:</span>
<span class="token comment">#     def __init__(self, val=0, next=None):</span>
<span class="token comment">#         self.val = val</span>
<span class="token comment">#         self.next = next</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        dummy_head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token builtin">next</span><span class="token operator">=</span>head<span class="token punctuation">)</span>
        current <span class="token operator">=</span> dummy_head
        
        <span class="token comment"># 必须有cur的下一个和下下个才能交换，否则说明已经交换结束了</span>
        <span class="token keyword">while</span> current<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">and</span> current<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            temp <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token comment"># 防止节点修改</span>
            temp1 <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
            
            current<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
            current<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> temp
            temp<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> temp1
            current <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> dummy_head<span class="token punctuation">.</span><span class="token builtin">next</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="go" tabindex="-1"><a class="header-anchor" href="#go" aria-hidden="true">#</a> Go：</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>
    dummy <span class="token operator">:=</span> <span class="token operator">&amp;</span>ListNode<span class="token punctuation">{</span>
        Next<span class="token punctuation">:</span> head<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//head=list[i]</span>
    <span class="token comment">//pre=list[i-1]</span>
    pre <span class="token operator">:=</span> dummy 
    <span class="token keyword">for</span> head <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>Next <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        pre<span class="token punctuation">.</span>Next <span class="token operator">=</span> head<span class="token punctuation">.</span>Next
        next <span class="token operator">:=</span> head<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Next
        head<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Next <span class="token operator">=</span> head
        head<span class="token punctuation">.</span>Next <span class="token operator">=</span> next
        <span class="token comment">//pre=list[(i+2)-1]</span>
        pre <span class="token operator">=</span> head 
        <span class="token comment">//head=list[(i+2)]</span>
        head <span class="token operator">=</span> next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>Next
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 递归版本</span>
<span class="token keyword">func</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>
    <span class="token keyword">if</span> head <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>Next <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> head
    <span class="token punctuation">}</span>
    next <span class="token operator">:=</span> head<span class="token punctuation">.</span>Next
    head<span class="token punctuation">.</span>Next <span class="token operator">=</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>Next<span class="token punctuation">)</span>
    next<span class="token punctuation">.</span>Next <span class="token operator">=</span> head
    <span class="token keyword">return</span> next
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> Javascript:</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">swapPairs</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">,</span> temp <span class="token operator">=</span> ret<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> cur <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">,</span> pre <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>
    temp<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>
    temp <span class="token operator">=</span> pre<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ret<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript：</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> dummyNode<span class="token operator">:</span> ListNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> curNode<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> dummyNode<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>curNode <span class="token operator">&amp;&amp;</span> curNode<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> curNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> firstNode<span class="token operator">:</span> ListNode <span class="token operator">=</span> curNode<span class="token punctuation">.</span>next<span class="token punctuation">,</span>
            secNode<span class="token operator">:</span> ListNode <span class="token operator">=</span> curNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">,</span>
            thirdNode<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> curNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        curNode<span class="token punctuation">.</span>next <span class="token operator">=</span> secNode<span class="token punctuation">;</span>
        secNode<span class="token punctuation">.</span>next <span class="token operator">=</span> firstNode<span class="token punctuation">;</span>
        firstNode<span class="token punctuation">.</span>next <span class="token operator">=</span> thirdNode<span class="token punctuation">;</span>
        curNode <span class="token operator">=</span> firstNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kotlin" tabindex="-1"><a class="header-anchor" href="#kotlin" aria-hidden="true">#</a> Kotlin:</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode<span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> dummyNode <span class="token operator">=</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span> 
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> cur<span class="token operator">:</span> ListNode<span class="token operator">?</span> <span class="token operator">=</span> dummyNode
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">?</span><span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> temp <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
        <span class="token keyword">val</span> temp2 <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next
        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next
        cur<span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next <span class="token operator">=</span> temp
        cur<span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next <span class="token operator">=</span> temp2
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="swift" tabindex="-1"><a class="header-anchor" href="#swift" aria-hidden="true">#</a> Swift:</h3><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">swapPairs</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> head<span class="token punctuation">:</span> <span class="token class-name">ListNode</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">ListNode</span><span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> head <span class="token operator">==</span> <span class="token nil constant">nil</span> <span class="token operator">||</span> head<span class="token operator">?</span><span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token nil constant">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> head
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> dummyHead<span class="token punctuation">:</span> <span class="token class-name">ListNode</span> <span class="token operator">=</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span>
    <span class="token keyword">var</span> current<span class="token punctuation">:</span> <span class="token class-name">ListNode</span><span class="token operator">?</span> <span class="token operator">=</span> dummyHead
    <span class="token keyword">while</span> current<span class="token operator">?</span><span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token operator">&amp;&amp;</span> current<span class="token operator">?</span><span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> temp1 <span class="token operator">=</span> current<span class="token operator">?</span><span class="token punctuation">.</span>next
        <span class="token keyword">let</span> temp2 <span class="token operator">=</span> current<span class="token operator">?</span><span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next
        
        current<span class="token operator">?</span><span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token operator">?</span><span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next
        current<span class="token operator">?</span><span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next <span class="token operator">=</span> temp1
        current<span class="token operator">?</span><span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next <span class="token operator">=</span> temp2
        
        current <span class="token operator">=</span> current<span class="token operator">?</span><span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dummyHead<span class="token punctuation">.</span>next
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="scala" tabindex="-1"><a class="header-anchor" href="#scala" aria-hidden="true">#</a> Scala:</h3><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token comment">// 虚拟头节点</span>
<span class="token keyword">object</span> Solution <span class="token punctuation">{</span>
  <span class="token keyword">def</span> swapPairs<span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode<span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span> <span class="token comment">// 虚拟头节点</span>
    <span class="token keyword">var</span> pre <span class="token operator">=</span> dummy
    <span class="token keyword">var</span> cur <span class="token operator">=</span> head
    <span class="token comment">// 当pre的下一个和下下个都不为空，才进行两两转换</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>pre<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> tmp<span class="token operator">:</span> ListNode <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token comment">// 缓存下一次要进行转换的第一个节点</span>
      pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next <span class="token comment">// 步骤一</span>
      cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> cur <span class="token comment">// 步骤二</span>
      cur<span class="token punctuation">.</span>next <span class="token operator">=</span> tmp <span class="token comment">// 步骤三</span>
      <span class="token comment">// 下面是准备下一轮的交换</span>
      pre <span class="token operator">=</span> cur
      cur <span class="token operator">=</span> tmp
    <span class="token punctuation">}</span>
    <span class="token comment">// 最终返回dummy虚拟头节点的下一个，return可以省略</span>
    dummy<span class="token punctuation">.</span>next
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="php" tabindex="-1"><a class="header-anchor" href="#php" aria-hidden="true">#</a> PHP:</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">//虚拟头结点</span>
<span class="token keyword">function</span> <span class="token function-definition function">swapPairs</span><span class="token punctuation">(</span><span class="token variable">$head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$head</span> <span class="token operator">==</span> <span class="token keyword type-declaration">null</span> <span class="token operator">||</span> <span class="token variable">$head</span><span class="token operator">-&gt;</span><span class="token property">next</span> <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$head</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token variable">$dummyNode</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$head</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$preNode</span> <span class="token operator">=</span> <span class="token variable">$dummyNode</span><span class="token punctuation">;</span> <span class="token comment">//虚拟头结点</span>
    <span class="token variable">$curNode</span> <span class="token operator">=</span> <span class="token variable">$head</span><span class="token punctuation">;</span>
    <span class="token variable">$nextNode</span> <span class="token operator">=</span> <span class="token variable">$head</span><span class="token operator">-&gt;</span><span class="token property">next</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$curNode</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$nextNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$nextNextNode</span> <span class="token operator">=</span> <span class="token variable">$nextNode</span><span class="token operator">-&gt;</span><span class="token property">next</span><span class="token punctuation">;</span> <span class="token comment">//存下一个节点</span>
        <span class="token variable">$nextNode</span><span class="token operator">-&gt;</span><span class="token property">next</span> <span class="token operator">=</span> <span class="token variable">$curNode</span><span class="token punctuation">;</span> <span class="token comment">//交换curHead 和 nextHead</span>
        <span class="token variable">$curNode</span><span class="token operator">-&gt;</span><span class="token property">next</span> <span class="token operator">=</span> <span class="token variable">$nextNextNode</span><span class="token punctuation">;</span>
        <span class="token variable">$preNode</span><span class="token operator">-&gt;</span><span class="token property">next</span> <span class="token operator">=</span> <span class="token variable">$nextNode</span><span class="token punctuation">;</span> <span class="token comment">//上一个节点的下一个指向指向nextHead</span>

        <span class="token comment">//更新当前的几个指针</span>
        <span class="token variable">$preNode</span> <span class="token operator">=</span> <span class="token variable">$preNode</span><span class="token operator">-&gt;</span><span class="token property">next</span><span class="token operator">-&gt;</span><span class="token property">next</span><span class="token punctuation">;</span>
        <span class="token variable">$curNode</span> <span class="token operator">=</span> <span class="token variable">$nextNextNode</span><span class="token punctuation">;</span>
        <span class="token variable">$nextNode</span> <span class="token operator">=</span> <span class="token variable">$nextNextNode</span><span class="token operator">-&gt;</span><span class="token property">next</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token variable">$dummyNode</span><span class="token operator">-&gt;</span><span class="token property">next</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//递归版本</span>
<span class="token keyword">function</span> <span class="token function-definition function">swapPairs</span><span class="token punctuation">(</span><span class="token variable">$head</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 终止条件</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$head</span> <span class="token operator">===</span> <span class="token keyword type-declaration">null</span> <span class="token operator">||</span> <span class="token variable">$head</span><span class="token operator">-&gt;</span><span class="token property">next</span> <span class="token operator">===</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$head</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//结果要返回的头结点</span>
    <span class="token variable">$next</span> <span class="token operator">=</span> <span class="token variable">$head</span><span class="token operator">-&gt;</span><span class="token property">next</span><span class="token punctuation">;</span>
    <span class="token variable">$head</span><span class="token operator">-&gt;</span><span class="token property">next</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">swapPairs</span><span class="token punctuation">(</span><span class="token variable">$next</span><span class="token operator">-&gt;</span><span class="token property">next</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前头结点-&gt;next指向更新</span>
    <span class="token variable">$next</span><span class="token operator">-&gt;</span><span class="token property">next</span> <span class="token operator">=</span> <span class="token variable">$head</span><span class="token punctuation">;</span>  <span class="token comment">//当前第二个节点的-&gt;next指向更新</span>
    <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">;</span>  <span class="token comment">//返回翻转后的头结点</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rust" tabindex="-1"><a class="header-anchor" href="#rust" aria-hidden="true">#</a> Rust:</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// 虚拟头节点</span>
<span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">swap_pairs</span><span class="token punctuation">(</span>head<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">ListNode</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">ListNode</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> dummy_head <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dummy_head<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> cur <span class="token operator">=</span> dummy_head<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">mut</span> node<span class="token punctuation">)</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">mut</span> next<span class="token punctuation">)</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                node<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                next<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        dummy_head<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// 递归</span>
<span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">swap_pairs</span><span class="token punctuation">(</span>head<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">ListNode</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">ListNode</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> head<span class="token punctuation">.</span><span class="token function">is_none</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> head<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">is_none</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> <span class="token keyword">mut</span> node <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">mut</span> next<span class="token punctuation">)</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">swap_pairs</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
            next<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Some</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">Some</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="c-1" tabindex="-1"><a class="header-anchor" href="#c-1" aria-hidden="true">#</a> C#</h3><div class="language-C# line-numbers-mode" data-ext="C#"><pre class="language-C#"><code>// 虚拟头结点
public ListNode SwapPairs(ListNode head)
{
    var dummyHead = new ListNode();
    dummyHead.next = head;
    ListNode cur = dummyHead;
    while (cur.next != null &amp;&amp; cur.next.next != null)
    {
        ListNode tmp1 = cur.next;
        ListNode tmp2 = cur.next.next.next;

        cur.next = cur.next.next;
        cur.next.next = tmp1;
        cur.next.next.next = tmp2;

        cur = cur.next.next;
    }
    return dummyHead.next;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-C# line-numbers-mode" data-ext="C#"><pre class="language-C#"><code>// 递归
public ListNode SwapPairs(ListNode head)
{
    if (head == null || head.next == null) return head;
    var cur = head.next;
    head.next = SwapPairs(head.next.next);
    cur.next = head;
    return cur;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49);function f(L,_){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[s("力扣题目链接"),e(a)])]),d,k,v,m,n("p",null,[n("strong",null,[n("a",b,[s("《代码随想录》算法视频公开课"),e(a)]),s("："),n("a",x,[s("帮你把链表细节学清楚！ | LeetCode：24. 两两交换链表中的节点"),e(a)]),s("，相信结合视频再看本篇题解，更有助于大家对本题的理解")]),s("。")]),h,y,g,n("p",null,[s("对虚拟头结点的操作，还不熟悉的话，可以看这篇"),n("a",w,[s("链表：听说用虚拟头节点会方便很多？"),e(a)]),s("。")]),N])}const P=t(i,[["render",f],["__file","0024.liangliangjiaohuanlianbiaozhongdejiedian.html.vue"]]);export{P as default};
