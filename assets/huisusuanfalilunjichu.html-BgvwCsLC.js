import{_ as s,r as t,o as d,c as l,a as n,b as e,d as i,e as r}from"./app-pMbPEaNl.js";const c={},o=r('<h1 id="回溯算法理论基础" tabindex="-1"><a class="header-anchor" href="#回溯算法理论基础" aria-hidden="true">#</a> 回溯算法理论基础</h1><h2 id="题目分类" tabindex="-1"><a class="header-anchor" href="#题目分类" aria-hidden="true">#</a> 题目分类</h2><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210219192050666.png" alt="img"></p><h2 id="算法公开课" tabindex="-1"><a class="header-anchor" href="#算法公开课" aria-hidden="true">#</a> 算法公开课</h2>',4),p={href:"https://programmercarl.com/other/gongkaike.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.bilibili.com/video/BV1cy4y167mM/",target:"_blank",rel:"noopener noreferrer"},u=n("h2",{id:"理论基础",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#理论基础","aria-hidden":"true"},"#"),e(" 理论基础")],-1),v=n("h3",{id:"什么是回溯法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#什么是回溯法","aria-hidden":"true"},"#"),e(" 什么是回溯法")],-1),m=n("p",null,"回溯法也可以叫做回溯搜索法，它是一种搜索的方式。",-1),g={href:"https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E9%80%92%E5%BD%92%E5%B8%A6%E7%9D%80%E5%9B%9E%E6%BA%AF.html",target:"_blank",rel:"noopener noreferrer"},b=r('<p>回溯是递归的副产品，只要有递归就会有回溯。</p><p><strong>所以以下讲解中，回溯函数也就是递归函数，指的都是一个函数</strong>。</p><h3 id="回溯法的效率" tabindex="-1"><a class="header-anchor" href="#回溯法的效率" aria-hidden="true">#</a> 回溯法的效率</h3><p>回溯法的性能如何呢，这里要和大家说清楚了，<strong>虽然回溯法很难，很不好理解，但是回溯法并不是什么高效的算法</strong>。</p><p><strong>因为回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案</strong>，如果想让回溯法高效一些，可以加一些剪枝的操作，但也改不了回溯法就是穷举的本质。</p><p>那么既然回溯法并不高效为什么还要用它呢？</p><p>因为没得选，一些问题能暴力搜出来就不错了，撑死了再剪枝一下，还没有更高效的解法。</p><p>此时大家应该好奇了，都什么问题，这么牛逼，只能暴力搜索。</p><h3 id="回溯法解决的问题" tabindex="-1"><a class="header-anchor" href="#回溯法解决的问题" aria-hidden="true">#</a> 回溯法解决的问题</h3><p>回溯法，一般可以解决如下几种问题：</p><ul><li>组合问题：N个数里面按一定规则找出k个数的集合</li><li>切割问题：一个字符串按一定规则有几种切割方式</li><li>子集问题：一个N个数的集合里有多少符合条件的子集</li><li>排列问题：N个数按一定规则全排列，有几种排列方式</li><li>棋盘问题：N皇后，解数独等等</li></ul><p><strong>相信大家看着这些之后会发现，每个问题，都不简单！</strong></p><p>另外，会有一些同学可能分不清什么是组合，什么是排列？</p><p><strong>组合是不强调元素顺序的，排列是强调元素顺序</strong>。</p><p>例如：{1, 2} 和 {2, 1} 在组合上，就是一个集合，因为不强调顺序，而要是排列的话，{1, 2} 和 {2, 1} 就是两个集合了。</p><p>记住组合无序，排列有序，就可以了。</p><h3 id="如何理解回溯法" tabindex="-1"><a class="header-anchor" href="#如何理解回溯法" aria-hidden="true">#</a> 如何理解回溯法</h3><p><strong>回溯法解决的问题都可以抽象为树形结构</strong>，是的，我指的是所有回溯法的问题都可以抽象为树形结构！</p><p>因为回溯法解决的都是在集合中递归查找子集，<strong>集合的大小就构成了树的宽度，递归的深度就构成了树的深度</strong>。</p><p>递归就要有终止条件，所以必然是一棵高度有限的树（N叉树）。</p><p>这块可能初学者还不太理解，后面的回溯算法解决的所有题目中，我都会强调这一点并画图举相应的例子，现在有一个印象就行。</p><h3 id="回溯法模板" tabindex="-1"><a class="header-anchor" href="#回溯法模板" aria-hidden="true">#</a> 回溯法模板</h3><p>这里给出Carl总结的回溯算法模板。</p>',23),_={href:"https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86.html",target:"_blank",rel:"noopener noreferrer"},f=r(`<ul><li>回溯函数模板返回值以及参数</li></ul><p>在回溯算法中，我的习惯是函数起名字为backtracking，这个起名大家随意。</p><p>回溯算法中函数返回值一般为void。</p><p>再来看一下参数，因为回溯算法需要的参数可不像二叉树递归的时候那么容易一次性确定下来，所以一般是先写逻辑，然后需要什么参数，就填什么参数。</p><p>但后面的回溯题目的讲解中，为了方便大家理解，我在一开始就帮大家把参数确定下来。</p><p>回溯函数伪代码如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>void backtracking(参数)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>回溯函数终止条件</li></ul>`,8),x={href:"https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86.html",target:"_blank",rel:"noopener noreferrer"},E=r(`<p>所以回溯也有要终止条件。</p><p>什么时候达到了终止条件，树中就可以看出，一般来说搜到叶子节点了，也就找到了满足条件的一条答案，把这个答案存放起来，并结束本层递归。</p><p>所以回溯函数终止条件伪代码如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>if (终止条件) {
    存放结果;
    return;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>回溯搜索的遍历过程</li></ul><p>在上面我们提到了，回溯法一般是在集合中递归搜索，集合的大小构成了树的宽度，递归的深度构成的树的深度。</p><p>如图：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210130173631174.png" alt="回溯算法理论基础"></p><p>注意图中，我特意举例集合大小和孩子的数量是相等的！</p><p>回溯函数遍历过程伪代码如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
    处理节点;
    backtracking(路径，选择列表); // 递归
    回溯，撤销处理结果
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>for循环就是遍历集合区间，可以理解一个节点有多少个孩子，这个for循环就执行多少次。</p><p>backtracking这里自己调用自己，实现递归。</p><p>大家可以从图中看出<strong>for循环可以理解是横向遍历，backtracking（递归）就是纵向遍历</strong>，这样就把这棵树全遍历完了，一般来说，搜索叶子节点就是找的其中一个结果了。</p><p>分析完过程，回溯算法模板框架如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>void backtracking(参数) {
    if (终止条件) {
        存放结果;
        return;
    }

    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
        处理节点;
        backtracking(路径，选择列表); // 递归
        回溯，撤销处理结果
    }
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这份模板很重要，后面做回溯法的题目都靠它了！</strong></p><p>如果从来没有学过回溯算法的录友们，看到这里会有点懵，后面开始讲解具体题目的时候就会好一些了，已经做过回溯法题目的录友，看到这里应该会感同身受了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本篇我们讲解了，什么是回溯算法，知道了回溯和递归是相辅相成的。</p><p>接着提到了回溯法的效率，回溯法其实就是暴力查找，并不是什么高效的算法。</p><p>然后列出了回溯法可以解决几类问题，可以看出每一类问题都不简单。</p><p>最后我们讲到回溯法解决的问题都可以抽象为树形结构（N叉树），并给出了回溯法的模板。</p><p>今天是回溯算法的第一天，按照惯例Carl都是先概述一波，然后在开始讲解具体题目，没有接触过回溯法的同学刚学起来有点看不懂很正常，后面和具体题目结合起来会好一些。</p>`,24);function k(B,A){const a=t("ExternalLinkIcon");return d(),l("div",null,[o,n("p",null,[n("strong",null,[n("a",p,[e("《代码随想录》算法视频公开课"),i(a)]),e("："),n("a",h,[e("带你学透回溯算法（理论篇）"),i(a)]),e("，相信结合视频再看本篇题解，更有助于大家对本题的理解。")])]),u,v,m,n("p",null,[e("在二叉树系列中，我们已经不止一次，提到了回溯，例如"),n("a",g,[e("二叉树：以为使用了递归，其实还隐藏着回溯"),i(a)]),e("。")]),b,n("p",null,[e("在讲"),n("a",_,[e("二叉树的递归"),i(a)]),e("中我们说了递归三部曲，这里我再给大家列出回溯三部曲。")]),f,n("p",null,[e("既然是树形结构，那么我们在讲解"),n("a",x,[e("二叉树的递归"),i(a)]),e("的时候，就知道遍历树形结构一定要有终止条件。")]),E])}const D=s(c,[["render",k],["__file","huisusuanfalilunjichu.html.vue"]]);export{D as default};
